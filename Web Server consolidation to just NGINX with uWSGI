These instructions are the current state (March 1 2020) of the proposed Web Server consolidation with CKAN 2.9 / 3.0

These have been tested with PasteDeploy's loadapp which will be replaced (soon) with Werkzeug


==========================
Deploying a source install
==========================

Once you've installed CKAN from source by following the instructions in “Install From Source”, 
you can follow these instructions to deploy your CKAN site using a production web server (Nginx) 
plus one of two Python Web Server Gateway Interface (WSGI) configurations (uWSGI or gunicorn), 
so that it's available to the Internet.

Please note with CKAN 2.9+ (or maybe CKAN 3.0+) we have standardised on using SSL between all 
components ie: Nginix and WSGI servers
   
If you installed CKAN from package you don't need to follow this section, your site is already 
deployed using Nginux and uWSGI as described below.

CKAN can be used with two different web server and deployment configuration options:

NGINX with uWSGI
NGINX with gunicorn


This guide explains how to deploy CKAN using either uWSGI or gunicorn, proxied with Nginx 
on an Ubuntu server. These instructions have been tested on Ubuntu 18.04 and 16.04.

This documentation uses port 8000 as the port for either uWSGI or gunicorn

Log file location and port allocation will change to something more appropriate

----------------
1. Install Nginx
----------------

Install Nginx_ (a web server) which will proxy the content from one of the WSGI servers and add a layer of caching::

    sudo apt-get install nginx


----------------------------------------
2. Install and configure the WSGI Server 
----------------------------------------


Create the /etc/ckan/default/wsgi.py file which will be used by both uWSGI and gunicorn



    import os
    from ckan.config.middleware import make_app as loadapp
    from ckan.cli import load_config

    config_filepath = '/etc/ckan/default/ckan.ini'
    conf = load_config(config_filepath)
    app = loadapp(conf.global_conf, **conf.local_conf)

This will be used by both the uWSGI configuration or the gunicorn configuration

Now there is a choice of what to do next. Either use uWSGI or gunicorn - both are supported

a. Install uWSGI

    pip install uwsgi

For reference the uWSGI command is as follows: /usr/lib/ckan/ckan-py3/bin/uwsgi -i /etc/ckan/default/ckan-uwsgi.ini

Create the /etc/ckan/default/ckan-uwsgi.ini file


    https           =  0.0.0.0:8000,/etc/ckan/default/localhost.crt,/etc/ckan/default/localhost.key
    uid             =  apache
    guid            =  apache
    wsgi-file       =  /etc/ckan/default/wsgi.py
    chdir           =  /usr/lib/ckan/ckan-py3
    virtualenv      =  /usr/lib/ckan/ckan-py3
    module          =  wsgi:application
    master          =  true
    pidfile         =  /tmp/%n.pid
    harakiri        =  50
    max-requests    =  5000
    vacuum          =  true
    callable        =  app

b. Install gunicorn

    pip install gunicorn

For reference the gunicorn command is as follows: /usr/lib/ckan/ckan-py3/bin/gunicorn -c /etc/ckan/default/ckan-gunicorn.py wsgi:app

Create the /etc/ckan/default/ckan-gunicorn.py file


    pidfile = '/tmp/gunicorn.pid'
    chdir = '/etc/ckan/default'
    errorlog = '/etc/ckan/default/gunicorn2.ERR'
    accesslog = '/etc/ckan/default/gunicorn2.ACCESS'
    loglevel = 'debug'
    bind = '127.0.0.1:8002'
    daemon = True
    workers = 4
    worker_class = 'sync'
    threads = 2
    user = 'root'
    group = 'root'
    keyfile = '/etc/ckan/default/localhost.key'
    certfile = '/etc/ckan/default/localhost.crt'
    ssl_version = 'TLSv1_2'
    

-----------------------------------------------------------------------------
3. Install and configure Supervisor to monitor and control uWSGI and gunicorn
-----------------------------------------------------------------------------
    
    apt-get install supervisor

    service supervisor enable
    service supervisor restart


a. uWSGI

The config file is: /etc/supervisor/conf.d/ckan-uwsgi.conf

    [program:ckan-uwsgi]

    command=/usr/lib/ckan/ckan-py3/bin/uwsgi -i /etc/ckan/default/ckan-uwsgi.ini

    ; Start just a single worker. Increase this number if you have many or
    ; particularly long running background jobs.
    numprocs=1
    process_name=%(program_name)s-%(process_num)02d

    ; Log files - change this to point to the existing CKAN log files
    stdout_logfile=/etc/ckan/default/uwsgi.OUT
    stderr_logfile=/etc/ckan/default/uwsgi.ERR

    ; Make sure that the worker is started on system start and automatically
    ; restarted if it crashes unexpectedly.
    autostart=true
    autorestart=true

    ; Number of seconds the process has to run before it is considered to have
    ; started successfully.
    startsecs=10

    ; Need to wait for currently executing tasks to finish at shutdown.
    ; Increase this if you have very long running tasks.
    stopwaitsecs = 600

    ; Required for uWSGI as it does not obey SIGTERM.
    stopsignal=QUIT

b. gunicorn

The config file is: /etc/supervisor/conf.d/ckan-gunicorn.conf

    [program:ckan-gunicorn]

    command=/usr/lib/ckan/ckan-py3/bin/gunicorn -c /etc/ckan/default/ckan-gunicorn.py wsgi:app

    ; Start just a single worker. Increase this number if you have many or
    ; particularly long running background jobs.
    numprocs=1
    process_name=%(program_name)s-%(process_num)02d

    ; Log files - change this to point to the existing CKAN log files
    stdout_logfile=/etc/ckan/default/gunicorn.OUT
    stderr_logfile=/etc/ckan/default/gunicorn.ERR

    ; Make sure that the worker is started on system start and automatically
    ; restarted if it crashes unexpectedly.
    autostart=true
    autorestart=true

    ; Number of seconds the process has to run before it is considered to have
    ; started successfully.
    startsecs=10

    ; Need to wait for currently executing tasks to finish at shutdown.
    ; Increase this if you have very long running tasks.
    stopwaitsecs = 600

    ; Required for uWSGI as it does not obey SIGTERM.
    stopsignal=QUIT    

Once one of these files has been created you need to restart supervisor and then you can ckeck the status if needed

    service supervisor restart
    service supervisor status

You will now see either uWSGI or gunicorn processes running

-------------------------------
4. Create the Nginx config file
-------------------------------

Create your site's Nginx config file at |nginx_config_file|, with the
following contents:

    proxy_cache_path /tmp/nginx_cache levels=1:2 keys_zone=cache:30m max_size=250m;
    proxy_temp_path /tmp/nginx_proxy 1 2;

    server {
        listen 443 ssl;
        listen [::]:443;
        client_max_body_size 100M;
        ssl on;
        ssl_certificate      /etc/ckan/default/localhost.crt;
        ssl_certificate_key  /etc/ckan/default/localhost.key;
        ssl_protocols        TLSv1 TLSv1.1 TLSv1.2;

        access_log /var/log/nginx/ckan-access.log;
        error_log /var/log/nginx/ckan-error.log;
        location / {
            proxy_pass https://127.0.0.1:8000/;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_set_header Host $host;
            proxy_cache cache;
            proxy_cache_bypass $cookie_auth_tkt;
            proxy_no_cache $cookie_auth_tkt;
            proxy_cache_valid 30m;
            proxy_cache_key $host$scheme$proxy_host$request_uri;
            # In emergency comment out line to force caching
            # proxy_ignore_headers X-Accel-Expires Expires Cache-Control;
        }

    }
